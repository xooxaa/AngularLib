{
  "angularCliCards": [
    {
      "title": "Create a new Angular Project",
      "subtitle": "Creates a new folder and generates all files for a new boilerplate angular project. The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.",
      "code": [
        [
          { "text": "ng new", "style": "" },
          { "text": "*project-name*", "style": "codecolor-yellow" }
        ]
      ]
    },
    {
      "title": "Run Your Angular Project",
      "subtitle": "The Angular CLI includes a server, for you to build and serve your app locally. The ng serve command launches the server, watches your files, and rebuilds the app as you make changes to those files. Standard Adress: https://localhost:4200",
      "code": [[{ "text": "ng serve", "style": "" }]]
    },
    {
      "title": "Create a new Component",
      "subtitle": "The best way to create a component is with the Angular CLI. You can also create a component manually. By default, this command creates the following: A directory named after the component, a component file, a template file, a CSS file and a testing specification file.",
      "code": [
        [
          { "text": "ng generate component", "style": "" },
          { "text": "*component-name*", "style": "codecolor-yellow" }
        ],
        [
          { "text": "ng g c", "style": "" },
          { "text": "*component-name*", "style": "codecolor-yellow" }
        ]
      ]
    }
  ],

  "databindingCards": [
    {
      "title": "Interpolation / One Way Binding",
      "subtitle": "Interpolates the value of a given variable or expression",
      "code": [
        [
          { "text": "<div> {{", "style": "" },
          { "text": "*value*", "style": "codecolor-yellow" },
          { "text": "}} </div>", "style": "" }
        ]
      ]
    },
    {
      "title": "Property Binding",
      "subtitle": "Property binding in Angular helps you set values for properties of HTML elements or directives. Use property binding to do things such as toggle button features, set paths programmatically, and share values between components.",
      "code": [
        [
          { "text": "<input", "style": "" },
          { "text": "[property]", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "*value*", "style": "codecolor-yellow" },
          { "text": "\"/>", "style": "" }
        ]
      ]
    },
    {
      "title": "Attribute Binding",
      "subtitle": "Attribute binding in Angular helps you set values for attributes directly. With attribute binding, you can improve accessibility, style your application dynamically, and manage multiple CSS classes or styles simultaneously.",
      "code": [
        [
          { "text": "<button", "style": "" },
          { "text": "[attribute]", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "OK", "style": "codecolor-yellow" },
          { "text": "\"> OK </button>", "style": "" }
        ]
      ]
    },
    {
      "title": "Class and Style Binding",
      "subtitle": "Use class and style bindings to add and remove CSS class names from an element's class attribute and to set styles dynamically.",
      "code": [
        [
          { "text": "[class]", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "className", "style": "codecolor-yellow" },
          { "text": "\"", "style": "" }
        ],
        [
          { "text": "[style]", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "styleExpression", "style": "codecolor-yellow" },
          { "text": "\"", "style": "" }
        ]
      ]
    },
    {
      "title": "Event Binding",
      "subtitle": "Event binding lets you listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches.",
      "code": [
        [
          { "text": "<input", "style": "" },
          { "text": "[value]", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "*name*", "style": "codecolor-yellow" },
          { "text": "\"", "style": "codecolor-lightblue" }
        ],
        [
          { "text": "(input)", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "name = $event.target.value", "style": "codecolor-yellow" },
          { "text": "\" />", "style": "" }
        ]
      ]
    },
    {
      "title": "Two Way Binding",
      "subtitle": "Two-way binding gives components in your application a way to share data. Use two-way binding to listen for events and update values simultaneously between parent and child components. Two-way binding combines property binding with event binding.",
      "code": [
        [
          { "text": "<input", "style": "" },
          { "text": "[(ngModel)]", "style": "codecolor-lightblue" },
          { "text": "= \"", "style": "" },
          { "text": "*value*", "style": "codecolor-yellow" },
          { "text": "\"/>", "style": "" }
        ]
      ]
    }
  ],
  "lifecycleCards": [
    {
      "title": "",
      "subtitle": "",
      "code": [[{ "text": "", "style": "" }]]
    }
  ],
  "directivesCards": [
    {
      "title": "",
      "subtitle": "",
      "code": [[{ "text": "", "style": "" }]]
    }
  ],
  "decoratorsCards": [
    {
      "title": "",
      "subtitle": "",
      "code": [[{ "text": "", "style": "" }]]
    }
  ],
  "pipesCards": [
    {
      "title": "",
      "subtitle": "",
      "code": [[{ "text": "", "style": "" }]]
    }
  ],
  "routingCards": [
    {
      "title": "",
      "subtitle": "",
      "code": [[{ "text": "", "style": "" }]]
    }
  ],
  "materialCards": [
    {
      "title": "",
      "subtitle": "",
      "code": [[{ "text": "", "style": "" }]]
    }
  ]
}
